// Dashboard.tsx
// Componente Dashboard que encapsula la l√≥gica existente de la aplicaci√≥n de comida r√°pida
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Dashboard –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è

import { useEffect, lazy, Suspense, useContext } from 'react';
import FoodOrder from './FoodOrder';
import Cart from './Cart';
import OrdersManager from './OrdersManager';
import logger from '../services/logging';

// Importamos AuthContext para verificar roles
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AuthContext –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
import { AuthContext } from '../contexts/AuthContext';
import { Role } from '../services/IAuthService';

// Importamos los hooks y acciones de Redux
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è Redux
import { useAppDispatch, useAppSelector, useCartTotalItems, useUI } from '../store/hooks';
import { fetchMenu } from '../store/slices/menuSlice';
import { fetchOrders } from '../store/slices/ordersSlice';
import { 
  toggleChooseFoodPage, 
  toggleCart, 
  toggleOrdersManager,
  setSelectedFood 
} from '../store/slices/uiSlice';

// Carga diferida de componentes
// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const Foods = lazy(() => import('./Foods'));

const Dashboard: React.FC = () => {
  // Redux hooks
  const dispatch = useAppDispatch();
  const menuItems = useAppSelector(state => state.menu.items);
  const cartTotalItems = useCartTotalItems();
  const uiState = useUI();
  const isLoading = useAppSelector(state => state.menu.loading);

  // Auth context para verificar roles
  // Auth context –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
  const { user, roles } = useContext(AuthContext);

  // Verificar si el usuario es administrador
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const isAdmin = roles && roles.includes(Role.ADMIN);

  // Inicializaci√≥n del dashboard
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dashboard
  useEffect(() => {
    logger.info("üçΩÔ∏è Dashboard iniciado - cargando men√∫");
    dispatch(fetchMenu());
  }, [dispatch]);

  // Manejadores de eventos
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleToggleFoodPage = () => {
    logger.debug('üîÑ Alternando p√°gina de comida');
    dispatch(toggleChooseFoodPage());
  };

  const handleToggleCart = () => {
    logger.debug('üõí Alternando carrito');
    dispatch(toggleCart());
  };

  const handleToggleOrdersManager = () => {
    // Solo permitir si es administrador
    // –†–∞–∑—Ä–µ—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (!isAdmin) {
      logger.warn('‚ùå Acceso denegado: solo administradores pueden gestionar pedidos');
      alert('Solo los administradores pueden acceder a la gesti√≥n de pedidos');
      return;
    }

    logger.debug('üìã Alternando gestor de pedidos');
    dispatch(toggleOrdersManager());
    
    // Si abrimos el gestor de pedidos, cargamos los pedidos
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
    if (!uiState.showOrdersManager) {
      dispatch(fetchOrders());
    }
  };

  const handleFoodSelected = (food: any) => {
    logger.debug(`üçΩÔ∏è Comida seleccionada: ${food.name}`);
    dispatch(setSelectedFood(food));
  };

  const handleReturnToMenu = () => {
    logger.debug('üîô Regresando al men√∫');
    dispatch(setSelectedFood(null));
  };

  return (
    <div className="app-container">
      {/* Botones de navegaci√≥n principal */}
      {/* –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="header-buttons">
        <button 
          className="toggleButton" 
          onClick={handleToggleFoodPage}
          disabled={isLoading}
        > 
          {uiState.isChooseFoodPage ? "Disponibilidad" : "Pedir Comida"} 
        </button>
        
        <button 
          className="cartButton" 
          onClick={handleToggleCart}
        >
          Carrito ({cartTotalItems})
        </button>
        
        {/* Solo mostrar bot√≥n de gesti√≥n para administradores */}
        {/* –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ */}
        {isAdmin && (
          <button
            className="ordersButton"
            onClick={handleToggleOrdersManager}
            title="Solo disponible para administradores"
          >
            {uiState.showOrdersManager ? "Cerrar Pedidos" : "Gestionar Pedidos"}
          </button>
        )}
      </div>
      
      <h3 className="title">Comida R√°pida Online</h3>
      
      {/* Mostrar informaci√≥n del usuario y rol */}
      {/* –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ä–æ–ª–∏ */}
      <div style={{ 
        marginBottom: '1rem', 
        padding: '0.5rem', 
        background: isAdmin ? '#d4edda' : '#e2e3e5',
        borderRadius: '5px',
        fontSize: '0.9rem'
      }}>
        üë§ Usuario: <strong>{user?.email}</strong> | 
        üîë Rol: <strong>{isAdmin ? 'Administrador' : 'Usuario'}</strong>
        {isAdmin && <span> | ‚öôÔ∏è Tienes acceso completo al sistema</span>}
      </div>
      
      {/* Indicador de carga */}
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div className="loading-indicator">
          Cargando men√∫...
        </div>
      )}
      
      {/* Carrito de compras */}
      {/* –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ */}
      {uiState.showCart && <Cart />}
      
      {/* Gestor de pedidos o contenido principal */}
      {/* –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      {uiState.showOrdersManager ? (
        // Solo mostrar si es administrador
        // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        isAdmin ? (
          <OrdersManager />
        ) : (
          <div style={{ 
            padding: '2rem', 
            background: '#f8d7da', 
            borderRadius: '5px',
            color: '#721c24',
            textAlign: 'center'
          }}>
            <h4>‚ùå Acceso Denegado</h4>
            <p>Solo los administradores pueden acceder a la gesti√≥n de pedidos.</p>
          </div>
        )
      ) : (
        <>
          {/* Vista de disponibilidad (men√∫ principal) */}
          {/* –í–∏–¥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) */}
          {!uiState.isChooseFoodPage && (       
            <>
              <h4 className="subTitle">Men√∫s</h4> 
              <ul className="ulApp"> 
                {menuItems.map((item) => ( 
                  <li 
                    key={item.id} 
                    className="liApp" 
                    onClick={() => handleFoodSelected(item)}
                  > 
                    <p>{item.name}</p>
                    <p>#{item.quantity}</p> 
                  </li> 
                ))} 
              </ul>
            </>
          )} 
        
          {/* Vista de pedido de comida */}
          {/* –í–∏–¥ –∑–∞–∫–∞–∑–∞ –µ–¥—ã */}
          {uiState.isChooseFoodPage && (
            uiState.selectedFood ? (
              <FoodOrder
                food={uiState.selectedFood}
                onReturnToMenu={handleReturnToMenu}
              />
            ) : (
              <Suspense fallback={<div>Cargando detalles‚Ä¶</div>}>
                <Foods onFoodSelected={handleFoodSelected} />
              </Suspense>
            )
          )}
        </>
      )}
    </div>
  );
};

export default Dashboard;